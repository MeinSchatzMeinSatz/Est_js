"클로져"

outerFunc 함수 내부에서 중첩 함수 innerFunc가 정의되고 호출되었다. 이떄 중첩 함수 innerFunc의의 상위 스코프는 외부 함수 outerFunc의 스코프다. 따라서 중첩 함수 innerFunc 내부에서 자신을 포함하고 있는 외부 함수 outerFunc의 x 변수에 접근할 수 있다.

만약 innerFunc 함수가 outerFunc함수의 내부에서 정의된 중첩 함수가 아니라면 innerFunc 함수를 outerFunc 함수의 내부에서 호출한다 하더라도 outerFunc 함수의 변수에 접근할 수 없다.

이 같은 현상이 발생하는 이유는 자바스크립트가 "렉시컬 스코프"를 따르는 언어이기 때문이다.

"렉시컬 스코프"

자바스크립트 엔진은 "함수를 어디서 호출했는지"가 아니라 "함수를 어디에 정의했는지"에 따라 상위 스코프를 결정한다.
이를 렉시컬 스코프(정적 스코프)라 한다.

위 예제의 foo 함수와 bar 함수는 모두 전역에서 정의된 전역 함수다. 함수의 상위 스코프는 함수를 어디서 정의했느냐에 따라 결정되므로 foo 함수와 bar 함수의 상위 스코프는 전역이다. 함수를 어디서 호출하는지는 상위 스코프 결정에 어떠한 영향도 주지 못한다. 즉, 함수의 상위 스코프는 함수를 정의한 위치에 의해 정적으로 결정되고 변하지 않는다.

스코프의 실체는 컨텍스트의 렉시컬 환경이다. 이 렉시컬 환경은 자신의 "외부 렛시컬 환경에 대한 참조"를 통해 상위 렉시컬과 연결된다. 이것이 바로 스코프 체인이다.

따라서 "함수의 상위 스코프를 결정한다"는 것은 "렉시컬 환경의 외부 렉시컬 환경에 대한 참조에 저장할 참조값을 결정한다."는 것과 같다. 렉시컬 환경의 "외부 렉시컬 환경에 대한 참조"에 저장할 참조값이 바로 상위 레시컬 환경에 대한 참조이며, 이것이 상위 스코프이기 때문이다. 이 개념을 반영해서 다시 한번 렉시컬 스코프를 정의해 보면 다음과 같다.

=> 렉시컬 환경의 "외부 렉시컬 환경에 대한 참조"에 저장할 참조값, 즉 상위 스코프에 대한 참조는 함수 정의가 평가되는 시점에 함수가 정의된 환경(위치)에 의해 결정된다. 이것이 바로 렉시컬 스코프다.

24.2 함수 객체의 내부 슬롯

함수가 정의된 환경(위치)과 호출되는 환경(위치)은 다를 수 있다. 따라서 렉시컬 스코프가 가능하려면 함수는 자신이 호출되는 환경과는 상관없이 자신이 정의된 환경, 즉 상위 스코프(함수 정의가 위치하는 스코프가 바로 상위 스코프다)를 기억해야 한다. 이를 위해 함수는 자신의 내부 슬롯[[Environment]]에 자신이 정의된 환경, 즉 상위 스코프의 참조를 저장한다.

다시 말해, 함수 정의가 평가되어 함수 객체를 생성할 때 자신이 정의된 환경(위치)에 의해 결정된 상위 스코프의 참조를 함수 객체 자신의 내부 슬롯[[Environment]]에 저장한다. 이때 자신의 내부 슬롯[[Environment]]에 저장된 상위 스코프의 참조는 현재 실행 중인 실행 컨텍스트의 렉시컬 환경을 가리킨다.

왜냐하면 함수 정의가 평가되어 함수 객체를 생성하는 시점은 함수가 정의된 환경, 즉 상위 함수(또는 전역코드)가 평가 되고 실행되고 있는 시점이며, 이때 현재 실행 중인 실행 컨텍스트는 상위 함수(또는 전역 코드)의 실행 컨텍스트이기 때문이다.

예를 들어, 전역에서 정의된 함수 선언문은 전역 코드가 평가되는 시점에 평가되어 함수 객체를 생성한다. 이때 생성된 함수 객체의 내부 슬롯[[Envrionment]]에는 함수 정의가 평가되는 시점, 즉 전역 코드 평가 시점에 실행 중인 실행 컨텍스트의 렉시컬 환경인 전역 렉시컬 환경의 참조가 저장된다.

결론, 따라서 함수 객체의 내부 슬롯[[Environment]]에 저장된 현재 실행 중인 실행 컨텍스트의 렉시컬 환경의 참조가 바로 상위 스코프다. 또한 자신이 호출되었을 때 생성될 함수 렉시컬 환경의 "외부 렉시컬 환경에 대한 참조"에 저장될 참조값이다. 함수 객체는 내부 슬롯[[Environment]]에 저장된 렉시컬 환경의 참조, 즉 상위 스코프를 자신이 존재하는 한 기억한다.



클로저와 렉시컬 환경

outer 함수를 호출하면, outer 함수는 중첩 함수 inner 를 반환하고 생명 주기를 마감한다. 즉, outer 함수의 실행 컨텍스트는 스택에서 제거된다. 이때 함수의 지역 변수 x와 변수 값 10을 저장하고 있던 outer 함수의 실행 컨텍스트가 제거되었으므로 outer 함수의 지역 변수 x 또한 생명 주기를 마감한다. 따라서 outer 함수의 지역 변수 x는 더는 유효하지 않게 되어 x 변수에 접근할 수 있는 접근할 수 있는 방법 달리 없어 보인다.

그러나 위 코드의 실행 결과 outer 함수의 지역 x의 값인 10이다. 이미 생명 주기가 종료되어 실행 컨텍스트 스택에서 제거된 outer 함수의 지역 변수 x가 다시 부활이라도 한 듯이 동작하고 있다.

이처럼 외부 함수보다 중첩 함수가 더 오래 유지되는 경우 중첩 함수는 이미 생명 주기가 종료한 외부 함수의 변수를 참조할 수 있다. 이러한 중첩 함수를 "클로저"라고 한다.

"클로저는 함수와 그 함수가 선언된 렉시컬 환경과의 조합이다."
- 그 함수가 선언된 렉시컬 환경이란 함수가 정의된 위치의 스코프, 즉 상위 스코프를 의미하는 실행 컨텍스트의 렉시컬 환경을 말한다.

자바스크립트의 모든 함수는 자신의 상위 스코프를 기억한다. 모든 함수가 기억하는 상위 스코프는 함수를 어디서 호출하든 상관없이 유지된다. 따라서 함수를 어디서 호출하든 상관없이 함수는 언제나 자신이 기억하는 상위 스코프의 식별자를 참조할 수 있으며 식별자에 바인딩된 값을 변경할 수도 있다.

클로저란,

함수와 그 함수가 선언될 떄의 환경(스코프)가 함께 기억되는 현상입니다.
즉, 내부 함수가 외부 함수의 변수에 접근할 수 있고, 외부 함수가 종료된 후에도 내부 함수가 외부 함수에 접근할 수 있습니다.

클로저가 왜 유용한가?
데이터 은닉(캡슐화)
외부에서 직접 접근할 수 없는 변수를 만들고, 내부 함수로만 접근하게 할 수 있습니다.

상태 유지
함수 실행이 끝난 뒤에도 특정 값을 계속 기억할 수 있습니다.

모듈화
관련 데이터와 함수를 묶어 관리할 수 있습니다.

결론,
클로저는 함수가 자신이 선언된 환경(스코프)를 기억하는 것.
함수 실행이 끝나도, 내부 함수가 외부 함수의 변수에 접근할 수 있게 해줍니다.
자바스크립트에서 상태 유지, 데이터 은닉, 모듈화 등에 매우 자주 활용됩니다.

"함수가 태어난 환경을 평생 잊지 않고 기억하는 능력" 이 클로저다.