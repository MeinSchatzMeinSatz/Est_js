// 클래스는 함수이며 기존 프로토타입 기반 패턴을 클래스 기반 패턴처럼 사용할 수 있도록 하는 문법적 설탕(?)이라고 할 수 있다.

// 단, 클래스와 생성자 함수는 모두 프로토타입 기반의 인스턴스를 생성하지만 정확히 동일하게 동작하지는 않는다. 클래스는 생성자 함수보다 엄격하며 생성자 함수에서는 제공하지 않는 기능도 제공한다.

// 클래스 와 생성자 함수의 차이점.
// 1. 클래스를 new 연산자 없이 호출하면 에러가 발생한다. 반면, 생성자 함수를 new 연산자 없이 호출하면 일반 함수로서 호출된다.
// 2. 클래스는 상속을 지원하는 extends와 super 키워드를 제공한다. 하지만 생성자 함수는 extends와 super 키워드를 지원하지 않는다.
// 3. 클래스는 호이스팅이 발생하지 않는 것처럼 동작한다. 하지만 함수 선언문으로 정의된 생성자 함수는 함수 호이스팅이, 함수 표현식으로 정의한 생성자 함수는 변수 호이스팅이 발생한다.
// 4. 클래스 내의 코드에는 암묵적으로 strict mode를 해체할 수 없다. 하지만 생성자 함수는 암묵적으로 strict mode 가 지정된다.
// 5. 클래스 constructor. 프로토타입 메서드, 정적 메서드는 모두 프로퍼티 어트리뷰트[[Enumerable]]의 값이 false다. 다시 말해, 열거되지 않는다.

// 생성자 함수와 클래스는 프로토타입 기반의 객체지향을 구현했다는 점에서 매우 유사하다. 하지만 클래스는 생성자 함수 기반의 객체 생성 방식보다 견고하고 명료하다. 특히 클래스의 extends와 super 키워드는 상속 관계 구현을 더욱 간결하고 명료하게 한다.

// 클래스는 새로운 객체 생성 메커니즘으로 보는 것이 합당하다.

// 클래스 정의
// 클래스는 class 키워드를 사용하여 정의한다. 클래스 이름은 생성자 함수와 마찬가지로 파스칼 케이스를 사용하는 것이 일반적이다. 파스칼 케이스를 사용하지 않아도 에러가 발생하지는 않는다.

// 일반적이지는 않지만 함수와 마찬가지로 표현식으로 클래스를 정의할 수도 있다. 이때 클래스는 함수와 마찬가지로 이름을 가질 수도 있고, 갖지 않을 수도 있다.

// 클래스를 표현식으로 정의할 수 있다는 것은 클래스가 값으로 사용할 수 있는 일급 객체라는 것을 의미한다. 즉, 클래스는 일급 객체로서 다음과 같은 특징을 갖는다.

// - 무명의 리터럴로 생성할 수 있다. 즉, 런타임에 생성이 가능하다.
// - 변수나 자료구조(객체, 배열 등)에 저장할 수 있다.
// - 함수의 매개변수에게 전달할 수 있다.
// - 함수의 반환값으로 사용할 수 있다.

// 좀 더 자세히 말하자면, 클래스는 함수다. 따라서 클래스는 값처럼 사용할 수 있는 일급 객체다. 이에 대해서는 차차 알아보도록 하자.

// 클래스 몸체에는 0개 이상의 메서드만 정의할 수 있다. 클래스 몸체에서 정의할 수 있는 메서드는 constructor(생성자), 프로토타입 매서드, 정적 메서드의 세 가지가 있다.

// 클래스 선언문
class Person {
    constructor(name) {
        this.name = name;
    }

    // 프로토타입 메서드
    sayHi() {
        console.log(`Hi, My Name is ${this.name}`);
    }

    // 정적 메서드
    static sayHello() {
        console.log("Hello!");
    }
}

const me = new Person("Lee");

console.log(me.naem);
me.sayHi();
Person.sayHello();

// 프로토타입 메서드는 자바스크립트에서 생성자 함수로 만든 객체들이 공유하는 메서드이다.
